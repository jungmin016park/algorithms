#if 0
MH 
[MH1720] 대규의 팬덤활동

[제한 사항]

시간
100개 테스트케이스를 합쳐서 C/C++의 경우 1초 / Java의 경우 2초

메모리
힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내



UI의 사생팬, 대규는 맨날 자기 전 1시간동안 팬카페에서 여러가지 활동을 한다.

어느 날, UI가 카페에 나타나더니 팬들에게 이런 제안을 했다.

“오늘 하루가 지나기 전까지 0~9 숫자가 모두 등장하고, 

길이가 N인 삐긋 수들의 개수를 댓글로 가장 먼저 달아주신다면, 저와 함께 일일 데이트를 할 수 있습니다!”

여기서 삐끗 수란 인접한 숫자가 1씩 차이나는 수를 말한다. 

예를 들면, 1232345 같은 수를 의미한다. 길이가 10인 삐끗 수 중에서 조건에 맞는 수는 9876543210 밖에 없다. 

단, 수는 0으로 시작할 수 없다.



파격적인 조건을 보고 놀란 대규는 손으로 써가며 가능한 모든 수를 찾기 시작했다. 

한 10분이 지나자, 사람이 할 짓이 못 된다고 생각했다. 포기하던 찰나.. 여러분이 타이밍 좋게 등장했다.

여러분은 대규를 도와 하루가 지나기 전에 정답을 맞힐 수 있도록 도와줄 수 있는 실력자다.

최대한 빨리 조건에 맞는 삐긋 수 개수를 구하는 프로그램을 만들어 대규가 무사히 데이트 갈 수 있도록 해주자.

삐긋 수의 개수는 생각보다 클 수 있기 때문에 답을 출력할 때, 10억으로 나눈 나머지로 출력한다.


[입력]

첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

각 테스트 케이스의 첫 번째 줄에는 수의 길이를 의미하는 정수 N(1 ≤ N ≤ 100)이 주어진다.

[출력]

각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고,

길이가 N인 삐끗 수의 개수를 10억으로 나눈 나머지를 출력하라.

입력 예제
 
4
10
11
50
100
// 테스트 케이스 개수
// 첫 번째 테스트 케이스





출력 예제
 
#1 1
#2 3
#3 928508497
#4 670667793
// 첫 번째 테스트 케이스 결과 


 

 
N = 10일 때는 9876543210 이 유일한 경우이다.
#endif

#include "stdafx.h"
#include <iostream>
using namespace std;
#define MAX_L 10
#define MAX_N 100+1

int T, N;
int use[10] = { 0, };  // 0, 1, 2, ... 9 bit
int Dp[MAX_L/*last*/][MAX_N/*num*/];

#define abs_minus(a,b) (a>b) ? a - b : b - a;

int solve(int last, int cur_idx, int num)
{
	int ret = 0;
	if (num == 0) {
		for (int i = 0; i < 10; i++) {
			if (use[i] == 0) {
				return 0;
			}
		}

		return 1;
	}
	
	if (cur_idx == 0) {
		for (int i = 1; i <= 9; i++) {

			use[i] = 1;
			ret += solve(i, cur_idx + 1, num - 1);
			use[i] = 0;
		}
	}
	else {

		int candidate = last - 1;
		if (candidate >= 0) {
			use[candidate] = 1;
			ret += solve(candidate, cur_idx + 1, num - 1);			
			use[candidate] = 0;
		}

		candidate = last + 1;
		if (candidate <= 9) {
			use[candidate] = 1;
			ret += solve(candidate, cur_idx + 1, num - 1);
			use[candidate] = 0;
		}
	}

	return ret;
}

int main()
{
	cin >> T;

	while (T--) {
		cin >> N;

		memset(Dp, -1, sizeof(Dp));
		cout << solve(0, 0, N) % 1000000000 << endl;
	};
}
