/*
[H1718] 정우의 문자열 꿈

문제 
※ 문제 및 풀이에 대해 사외 온라인/오프라인에 게시/공유 하는 것은 금지되어 있습니다.  
   SW Expert 아카데미의 문제는 삼성전자 직원에게만 오픈 되어 있습니다. 

[제한 사항]

시간 : 126개 테스트케이스를 합쳐서 C/C++의 경우 1초 / Java의 경우 2초
메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내
 

정우는 꿈에서 N개의 서로 다른 문자로 이루어진 문자열을 보았다. 

이 문자열을 구성하는 문자는 알파벳의 처음 N 개의 소문자였다.

이 문자열은 이내 N(N+1)/2개의 다른 문자열로 분열되었다. 

새로운 문자열들을 보던 정우는 이내 이 문자열들이 원래 문자열이 가질 수 있는 모든 연속한 부분 문자열임을 알 수 있었다. 

연속한 부분 문자열이란 원래의 문자열에서 연속하게 나타나는 일부분을 말한다.

정우는 이내 꿈에서 깨어났고, 이 놀라운 체험을 다시 기억해내기 위해 애썼다. 

그러나 보통의 꿈이 그렇듯, 꿈속의 기억은 희미해졌고 기억나는 것은 N과 N(N+1)/2개의 부분 문자열을 사전 순으로 정렬했을 때 K번째 문자열이 S라는 것만 기억이 난다. 

이 때 처음 나왔던 문자열로 가능한 것의 개수가 몇 개인지 구하는 프로그램을 작성하라.

예를 들어, 처음 나왔던 문자열이 “cab”라고 하자. 

이 문자열의 부분 문자열 6개는 “c”, “ca”, “cab”, “a”, ‘ab”, “b”이고, 이를 사전 순으로 정렬하면 “a”, “ab”, “b”, “c”, “ca”, “cab”가 된다. 

만약 K=4 이고 S= “c”이면 “cab”는 답으로 고려되어야 하는 문자열이 된다.



[입력]

첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

각 테스트 케이스의 첫 번째 줄에는 두 정수 N, K ( 1 ≤ N ≤ 26, 1 ≤ K ≤ N(N+1)/2 )가 공백으로 구분되어 주어진다.

두 번째 줄에는 문자열 S가 주어진다. 

이 문자열은 길이 N이하인 문자열이고, 알파벳의 처음 N개의 소문자로만 이루어져 있으며, 같은 문자를 포함하지 않는다.



[출력]

각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고, 처음 꿈에 나온 문자열로 가능한 개수를 출력한다. 

이 수는 매우 클 수 있으므로, 1,000,000,007로 나눈 나머지를 출력해야 한다.



입력 예제
 
4
3 4
c
3 6
cab
26 60
send
26 260
send
// 테스트 케이스 개수
// 첫 번째 테스트 케이스, N = 3, K = 4
// 문자열 S = “c”
// 두 번째 테스트 케이스, N = 3, K = 6
 
// 세 번째 테스트 케이스
 
// 네 번째 테스트 케이스
 


출력 예제
 
#1 2
#2 1
#3 0
#4 683771679
// 첫 번째 테스트 케이스 결과
// 두 번째 테스트 케이스 결과
// 세 번째 테스트 케이스 결과
// 네 번째 테스트 케이스 결과
*/


#include "stdafx.h"
//#include <iostream>
//using namespace std;

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

const int MAXN = 1000 + 1;

int T;
int N, M, K;

char S[MAXN];

char *glist[MAXN];

int candidate[100][100];  //

char string[MAXN][100];
int string_num = 0;


char sub_string[MAXN][100];

/*
if true, return 1
otherwise, return 0
*/
int compare(char *list[], int small, int big)
{
	int s_len = strlen(list[small]);
	int b_len = strlen(list[big]);

	char *s_ptr = list[small];
	char *b_ptr = list[big];

	while (*s_ptr == *b_ptr) {
		s_ptr++;
		b_ptr++;
	};

	if (*s_ptr < *b_ptr)
		return 1;
	else
		return 0;
}

void swap(char *list[], int left, int right)
{
	char *tmp = list[left];
	list[left] = list[right];
	list[right] = tmp;
}

int partition(char *list[], int left, int right)
{
	// left ++
	// right --
	// swap
	int pilot = left;
	left++;

	while (left <= right) {
		while (left < right && compare(list, left, pilot)) left++;
		while (left <= right && compare(list, pilot, right)) right--;

		if (left < right)
			swap(list, left, right);
	}

	swap(list, pilot, right);
	return right;
}

void quick_sort(char *list[], int left, int right)
{

	if (left < right) {
		int mid = partition(list, left, right);
		// divide
		quick_sort(list, left, mid - 1);
		quick_sort(list, mid + 1, right);
	}
}

int sub_str_idx;
void make_sub_string(int string_idx)
{
	char *start_c;

	for (int i = 0; i < N; i++) {
		start_c = &string[string_idx][i];
		sub_string[sub_str_idx][0] = *start_c;
		glist[sub_str_idx] = sub_string[sub_str_idx];
		sub_str_idx++;

		for (int j = i + 1; j < N; j++) {

			for (int k = 0; k <= j - i; k++) {
				sub_string[sub_str_idx][k] = *(start_c + k);
			}
			glist[sub_str_idx] = sub_string[sub_str_idx];
			sub_str_idx++;
		}
	}
}

int combination(int n, int r)
{
	if (n == r || r == 0) return 1; 
	else return combination(n - 1, r - 1) + combination(n - 1, r);
}

int get_candidate(char *c, int num)
{
	int i;
	for (i = 0; i < num; i++) {
		if (candidate[i] == 0)
			break;
	}
	
	if (i == num)
		return -1;

	*c = 'a' + i;
	candidate[i] = 1;
	return 0;
}

void make_string(int idx, int num)
{
	char c;

	if (idx == num) {	
		return;
	}

	if (get_candidate(&c, num) < 0) {
		
	}
		
	string[string_num][idx] = c;
	make_string(idx+1, num);
}

int main(void) {
	for (int i = 0; i < 2; i++) {
		make_string(0);

		string_num++;
		memset(candidate, 0, sizeof(int) * num);
	}
/*
	scanf("%d", &T);
	while (T--) {

		scanf("%d%d%s", &N, &K, &S);

		make_string(0, N);
		int string_num = N*(N - 1);
		for (int i = 0; i < string_num; i++) {

			//sub_string_idx
			sub_str_idx = 0;
			make_sub_string(i);

			//sort
			quick_sort(glist, 0, sub_str_idx - 1);

			//find result
			printf("\n");
		}
	}
*/

	printf("\n");

	return 0;
}
