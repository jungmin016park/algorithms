※ 문제 및 풀이에 대해 사외 온라인/오프라인에 게시/공유 하는 것은 금지되어 있습니다.  
   SW Expert 아카데미의 문제는 삼성전자 직원에게만 오픈 되어 있습니다. 

 [제한 사항]

시간
100개 테스트케이스를 합쳐서 C/C++의 경우 5초 / Java의 경우 10초
    메모리
힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내

모험가 현호는 마침내 삼성랜드의 보물을 발견하였다.

하지만 이 보물을 얻기 위해선 자물쇠에 걸린 비밀번호를 맞추어야 한다.

현호는 책 한 권을 가지고 있는데 그 책에는 비밀번호를 맞추기 위한 힌트가 적혀있다.

그 힌트의 내용은 다음과 같았다.

1. 어떠한 집합에 자연수 N개가 존재한다.

2. 집합의 수를 나열한 후 이어 붙여서 만든 수가 K의 배수가 되는 순열을 찾아라.

3. K의 배수가 되는 순열의 개수가 자물쇠의 비밀번호이다.

수학시간에 공부를 열심히 하던 현호는 이것이 배수 순열이라는 것을 알고 있다.

예시를 하나 들자면, 집합 {23, 10, 9}의 순열 중에 K=11의 배수는 {10, 9, 23}이 있다.

이를 이어서 만든 수는 10923이며 이는 11의 배수이다.

지금 현재 책에는 힌트뿐만이 아니라 집합에 속한 수의 개수 N개의 수와 K개도 적혀 있다.

총 N! 개의 순열 중에 K의 배수 순열의 개수를 구하는 프로그램을 만들어 현호를 부자로 만들어주자!


[입력]

첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

각 테스트 케이스의 첫 번째 줄에는 자연수 N(1≤N≤15)가 주어진다.

두 번째 줄에 집합에는 속해 있는 자연수 개가 공백 하나로 구분되어 주어진다.

모든 수는 0으로 시작하지 않으며 길이가 50 이하이다. 각 테스트 케이스의 세 번째 줄에는 K(1≤K≤100)가 주어진다.


[출력]

각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고,

자물쇠의 비밀번호(K의 배수 순열 개수)를 출력하라.

입력 예제
 
4
3
3 5 8
2
5
1 2 3 4 5
4
9
11 22 33 44 55 66 77 88 99
3
3
1 1 1
3
// 테스트 케이스 개수
// 첫 번째 테스트 케이스 N = 3
// 세 개의 자연수, 3 5 8
// K = 2
// 두 번째 테스트 케이스 N = 5


// 세 번째 테스트 케이스 N = 9  
 
 

 
 


출력 예제
 
#1 2
#2 24
#3 362880
#4 6
// 첫 번째 테스트 케이스 결과
// 두 번째 테스트 케이스 결과



첫 번째 예제에서는 2의 배수이기 위해서 일의 자리가 8이 되는 경우의 수를 구하면 된다. 358, 538 이 가능한 경우이다.

두 번째 예제에서는 4의 배수이기 위해서 십의 자리와 일의 자리를 보면 된다.

12, 24, 32, 52 이 가능하며, 각각에 6가지가 가능하므로 총 24가지가 가능한 배수 순열이다.





#include "stdafx.h"
#include <iostream>
using namespace std;
#define MAX_I 100
#define MAX_N 100

int T, N, M, K;
int arr[MAX_N];
int cnt = 0;

int swap(int i, int j)
{
	int temp;
	if (i == j) return 0;

	temp = arr[i];
	arr[i] = arr[j];
	arr[j] = temp;
	return 0;
}

void calculate(int TotalN)
{
	unsigned long long sum = 0;
	unsigned long long base;
	int i;
	
	for (i = TotalN - 1, base = 1; i >= 0; i--, base *= 10) {
		
		if (arr[i] >= 10) {
			sum += (arr[i] % 10) * base;
			base *= 10;
			sum += (arr[i] / 10) * base;
		}
		else {
			sum += (unsigned long long)arr[i] * (unsigned long long)base;
		}
	}
	
	if (sum % K == 0) cnt++;
}


int Permutation(int TotalN, int N)
{
	int i;

	if (N == 1) {
		/*
				for (i = 0; i < TotalN; i++) {
					printf("%d ", arr[i]);
				}
				printf("\n");
		*/
		calculate(TotalN);
		return 0;
	}

	for (i = 0; i < N; i++) {
		swap(i, N - 1);
		Permutation(TotalN, N - 1);
		swap(i, N - 1);
	}
}

int main()
{
	scanf("%d", &T);

	while (T--) {
		scanf("%d", &N);
		for (int i = 0; i < N; i++) {
			scanf("%d", &arr[i]);
		}
		scanf("%d", &K);

		/*
			N개의 자연수 순열 중에 K의 배수 갯수
		*/

		Permutation(N, N);
		printf("%d\n", cnt);
	};
}

